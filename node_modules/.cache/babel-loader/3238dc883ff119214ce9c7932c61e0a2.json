{"ast":null,"code":"import * as actionTypes from '../actions';\nconst initialState = {\n  persons: []\n};\n\nconst reducer = (state = initialState, action) => {\n  const newPerson = {\n    id: Math.random(),\n    // not really unique but good enough here!\n    name: 'Max',\n    age: Math.floor(Math.random() * 40)\n  };\n\n  switch (action.type) {\n    case actionTypes.ADD_PERSON:\n      return { ...state,\n        persons: state.persons.concat(newPerson)\n      };\n\n    case actionTypes.DELETE_PERSON:\n      const updatedArray = state.persons.filter(person => person.id !== action.personElementId);\n      return {\n        persons: updatedArray\n      };\n  }\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/student/Desktop/Udemy-React-Complete-Guide/redux--assignment-2-problem/src/store/reducers/persons.js"],"names":["actionTypes","initialState","persons","reducer","state","action","newPerson","id","Math","random","name","age","floor","type","ADD_PERSON","concat","DELETE_PERSON","updatedArray","filter","person","personElementId"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,YAA7B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE;AADU,CAArB;;AAIA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAmC;AACjD,QAAMC,SAAS,GAAG;AACdC,IAAAA,EAAE,EAAEC,IAAI,CAACC,MAAL,EADU;AACK;AACnBC,IAAAA,IAAI,EAAE,KAFQ;AAGdC,IAAAA,GAAG,EAAEH,IAAI,CAACI,KAAL,CAAYJ,IAAI,CAACC,MAAL,KAAgB,EAA5B;AAHS,GAAlB;;AAKA,UAASJ,MAAM,CAACQ,IAAhB;AACE,SAAKb,WAAW,CAACc,UAAjB;AACE,aAAO,EACL,GAAGV,KADE;AAELF,QAAAA,OAAO,EAAEE,KAAK,CAACF,OAAN,CAAca,MAAd,CAAsBT,SAAtB;AAFJ,OAAP;;AAIF,SAAKN,WAAW,CAACgB,aAAjB;AACE,YAAMC,YAAY,GAAGb,KAAK,CAACF,OAAN,CAAcgB,MAAd,CAAqBC,MAAM,IAAIA,MAAM,CAACZ,EAAP,KAAcF,MAAM,CAACe,eAApD,CAArB;AACA,aAAO;AACLlB,QAAAA,OAAO,EAAEe;AADJ,OAAP;AARJ;;AAYA,SAAOb,KAAP;AACD,CAnBD;;AAqBA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from '../actions';\n\nconst initialState = {\n  persons: []\n};\n\nconst reducer = (state = initialState, action ) => {\n  const newPerson = {\n      id: Math.random(), // not really unique but good enough here!\n      name: 'Max',\n      age: Math.floor( Math.random() * 40 )\n  };\n  switch ( action.type ) {\n    case actionTypes.ADD_PERSON:\n      return {\n        ...state,\n        persons: state.persons.concat( newPerson )\n      }\n    case actionTypes.DELETE_PERSON:\n      const updatedArray = state.persons.filter(person => person.id !== action.personElementId);\n      return {\n        persons: updatedArray\n      }\n    }\n  return state;\n}\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}