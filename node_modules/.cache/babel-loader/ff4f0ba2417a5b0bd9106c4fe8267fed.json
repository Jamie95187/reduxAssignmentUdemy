{"ast":null,"code":"import * as actionTypes from '../actions';\nconst initialState = {\n  persons: []\n};\n\nconst reducer = (state = initialState, action) => {\n  if (action.type === actionTypes.ADD_PERSON) {\n    const newPerson = {\n      id: Math.random(),\n      // not really unique but good enough here!\n      name: 'Max',\n      age: Math.floor(Math.random() * 40)\n    };\n    return { ...state,\n      persons: state.persons.concat({\n        newPerson\n      })\n    };\n  } else if (action.type === actionTypes.DELETE_PERSON) {\n    const updatedArray = state.persons.filter(person => person.id !== action.personElementId);\n    return {\n      persons: updatedArray\n    };\n  }\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/student/Desktop/Udemy-React-Complete-Guide/redux--assignment-2-problem/src/store/reducers/persons.js"],"names":["actionTypes","initialState","persons","reducer","state","action","type","ADD_PERSON","newPerson","id","Math","random","name","age","floor","concat","DELETE_PERSON","updatedArray","filter","person","personElementId"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,YAA7B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE;AADU,CAArB;;AAIA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAmC;AACjD,MAAKA,MAAM,CAACC,IAAP,KAAgBN,WAAW,CAACO,UAAjC,EAA6C;AAC3C,UAAMC,SAAS,GAAG;AACdC,MAAAA,EAAE,EAAEC,IAAI,CAACC,MAAL,EADU;AACK;AACnBC,MAAAA,IAAI,EAAE,KAFQ;AAGdC,MAAAA,GAAG,EAAEH,IAAI,CAACI,KAAL,CAAYJ,IAAI,CAACC,MAAL,KAAgB,EAA5B;AAHS,KAAlB;AAKA,WAAO,EACL,GAAGP,KADE;AAELF,MAAAA,OAAO,EAAEE,KAAK,CAACF,OAAN,CAAca,MAAd,CAAsB;AAAEP,QAAAA;AAAF,OAAtB;AAFJ,KAAP;AAID,GAVD,MAUO,IAAKH,MAAM,CAACC,IAAP,KAAgBN,WAAW,CAACgB,aAAjC,EAAiD;AACtD,UAAMC,YAAY,GAAGb,KAAK,CAACF,OAAN,CAAcgB,MAAd,CAAqBC,MAAM,IAAIA,MAAM,CAACV,EAAP,KAAcJ,MAAM,CAACe,eAApD,CAArB;AACA,WAAO;AACLlB,MAAAA,OAAO,EAAEe;AADJ,KAAP;AAGD;;AACD,SAAOb,KAAP;AACD,CAlBD;;AAoBA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from '../actions';\n\nconst initialState = {\n  persons: []\n};\n\nconst reducer = (state = initialState, action ) => {\n  if ( action.type === actionTypes.ADD_PERSON ){\n    const newPerson = {\n        id: Math.random(), // not really unique but good enough here!\n        name: 'Max',\n        age: Math.floor( Math.random() * 40 )\n    };\n    return {\n      ...state,\n      persons: state.persons.concat( { newPerson } )\n    }\n  } else if ( action.type === actionTypes.DELETE_PERSON ) {\n    const updatedArray = state.persons.filter(person => person.id !== action.personElementId);\n    return {\n      persons: updatedArray\n    }\n  }\n  return state;\n}\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}